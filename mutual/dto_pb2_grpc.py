# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dto_pb2 as dto__pb2


class CVServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ImgAnalyse_stream = channel.stream_stream(
                '/DTO.CVService/ImgAnalyse_stream',
                request_serializer=dto__pb2.imgRequest.SerializeToString,
                response_deserializer=dto__pb2.AIReply.FromString,
                )
        self.imganalyse = channel.unary_unary(
                '/DTO.CVService/imganalyse',
                request_serializer=dto__pb2.imgRequest.SerializeToString,
                response_deserializer=dto__pb2.AIReply.FromString,
                )
        self.configuration = channel.unary_unary(
                '/DTO.CVService/configuration',
                request_serializer=dto__pb2.imgRequest.SerializeToString,
                response_deserializer=dto__pb2.AIReply.FromString,
                )
        self.analyse_next = channel.unary_unary(
                '/DTO.CVService/analyse_next',
                request_serializer=dto__pb2.imgRequest.SerializeToString,
                response_deserializer=dto__pb2.imgRequest.FromString,
                )


class CVServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ImgAnalyse_stream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def imganalyse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def configuration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def analyse_next(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CVServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ImgAnalyse_stream': grpc.stream_stream_rpc_method_handler(
                    servicer.ImgAnalyse_stream,
                    request_deserializer=dto__pb2.imgRequest.FromString,
                    response_serializer=dto__pb2.AIReply.SerializeToString,
            ),
            'imganalyse': grpc.unary_unary_rpc_method_handler(
                    servicer.imganalyse,
                    request_deserializer=dto__pb2.imgRequest.FromString,
                    response_serializer=dto__pb2.AIReply.SerializeToString,
            ),
            'configuration': grpc.unary_unary_rpc_method_handler(
                    servicer.configuration,
                    request_deserializer=dto__pb2.imgRequest.FromString,
                    response_serializer=dto__pb2.AIReply.SerializeToString,
            ),
            'analyse_next': grpc.unary_unary_rpc_method_handler(
                    servicer.analyse_next,
                    request_deserializer=dto__pb2.imgRequest.FromString,
                    response_serializer=dto__pb2.imgRequest.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DTO.CVService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CVService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ImgAnalyse_stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/DTO.CVService/ImgAnalyse_stream',
            dto__pb2.imgRequest.SerializeToString,
            dto__pb2.AIReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def imganalyse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DTO.CVService/imganalyse',
            dto__pb2.imgRequest.SerializeToString,
            dto__pb2.AIReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def configuration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DTO.CVService/configuration',
            dto__pb2.imgRequest.SerializeToString,
            dto__pb2.AIReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def analyse_next(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DTO.CVService/analyse_next',
            dto__pb2.imgRequest.SerializeToString,
            dto__pb2.imgRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
